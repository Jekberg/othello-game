package com.othellog4.game.command;

import static org.junit.Assert.*;

import org.junit.Test;

import com.othellog4.game.Game;
import com.othellog4.game.GameException;
import com.othellog4.game.board.GameBoard;
import com.othellog4.game.player.Player;

/**
 * The JUnit test suit for the {@link Resume} class.
 * 
 * <p>
 * Redefines the tests from the {@link GameCommandTest} class.
 * </p>
 * 
 * @author 	159014260 John Berg
 * @since	05/03/2018
 * @version 05/03/2018
 */
public class ResumeTest extends GameCommandTest
{
	//=========================================================================
	//Overriden tests.
	/**
	 * Test the {@link Pause#getSource()} method of the {@link Pause} class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the {@link Pause#getSource()} method
	 * returns the {@link com.othellog4.game.player.Participant} object
	 * which was used to create the {@link Pause} object.
	 * </p>
	 */
	@Override
	@Test
	public final void testGetSource()
	{
		final Player source = new Player();
		assertSame(source, new Resume(source).getSource());
	}
	/**
	 * Test the
	 * {@link Resume#canExecute(com.othellog4.game.player.Participant)} method
	 * of the {@link Resume} class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the
	 * {@link Resume#canExecute(com.othellog4.game.player.Participant)}
	 * returns <code>true</code> when passed a
	 * {@link com.othellog4.game.player.Participant} which is equal to the
	 * {@link com.othellog4.game.player.Participant} object which was used
	 * to initialise the {@link Resume} object.
	 * </p>
	 */
	@Override
	@Test
	public final void testCanExecute_IssuersTurn()
	{
		final Player player = new Player();
		assertTrue(new Resume(player).canExecute(player));
	}
	/**
	 * Test the
	 * {@link Resume#canExecute(com.othellog4.game.player.Participant)} method
	 * of the {@link Resume} class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the
	 * {@link Resume#canExecute(com.othellog4.game.player.Participant)}
	 * returns <code>true</code> when passed a
	 * {@link com.othellog4.game.player.Participant} which is not equal to the
	 * {@link com.othellog4.game.player.Participant} object which was used
	 * to initialise the {@link Resume} object.
	 * </p>
	 */
	@Override
	@Test
	public final void testCanExecute_NotIssuersTurn()
	{
		assertTrue(new Resume(new Player()).canExecute(new Player()));
	}
	/**
	 * Test the {@link Resume#execute(Game)} method of the {@link Resume}
	 * class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the {@link Resume#execute(Game)} method
	 * throws a {@link NullPointerException} when provided a <code>null</code>
	 * argument.
	 * </p>
	 */
	@Override
	@Test(expected = NullPointerException.class)
	public final void testExecute_NullArg()
			throws
			GameException
	{
		new Resume(new Player()).execute(null);
	}
	/**
	 * Test the {@link Resume#execute(Game)} method of the {@link Resume}
	 * class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the {@link Resume#execute(Game)} method
	 * throws a {@link GameException} when executed onto a {@link Game} object
	 * which cannot be resumed.
	 * </p>
	 */
	@Override
	@Test(expected = GameException.class)
	public final void testExecute_Error()
			throws
			GameException
	{
		final Game game = new Game(new GameBoard(8));
		game.start();
		new Resume(new Player()).execute(game);
	}
	/**
	 * Test the {@link Resume#execute(Game)} method of the {@link Resume}
	 * class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass if the {@link Resume#execute(Game)} method
	 * modifies the {@link Game} such that it is in a resumed state.
	 * </p>
	 */
	@Override
	public final void testExecute_Success()
			throws
			GameException
	{
		final Game game = new Game(new GameBoard(8));
		game.start();
		game.pause();
		new Resume(new Player()).execute(game);
		assertTrue(game.isPlaying());
	}
	/**
	 * Test the {@link Resume#toString()} method of the {@link Resume} class.
	 * 
	 * <p>
	 * Redefined from the {@link GameCommandTest} class.
	 * </p>
	 * 
	 * <p>
	 * This test should only pass since there is no additional information
	 * generated by the {@link Resume} object.
	 * </p>
	 */
	@Override
	public final void testToString()
	{
		//No special test.
		//Subject to change.
	}

}
